@page "/fetchdata"
@using SelectionSort
@using LRSort.Models



<div>
    <div class="flex_left" style="width: 50%;">
        <div>
            <input type="text" @bind="@ArrayString" />
            <button @onclick="(async () => await Chache())">Sort</button>
            <p>Time sort (Microseconds): @ExTime.Microseconds</p>
        </div>
        <div>
            <h2>Step</h2>
            @if (sortResponce != null && sortResponce.ArrayStep.Count() > 0)
            {
                @for (int i = 0; i < sortResponce.ArrayStep.Count(); i++)
                {
                    <p>step @(i+1)  - @sortResponce.ArrayStep.ElementAt(i)</p>
                }
            }
        </div>

        @if (arrayNumber.Count > 0)
        {
            <h3>@responce</h3>
        }

    </div>


    <div class="flex_right" style="width: 50%;">



    </div>


</div>





@code {
    string ArrayString = "";
    List<double> arrayNumber = new();
    string responce = "";
    TimeSpan ExTime;
    int n, m = 0;
    double[,] numberArray = new double[0, 0];
    double[,] copy = new double[0, 0];
    double[,] buffernumberArray = new double[0, 0];
    SortResponce<double> sortResponce;

    async Task Chache()
    {
        if (ArrayString.Replace(" ", "") != "")
        {
            arrayNumber.Clear();
            responce = string.Empty;
            string[] arrayString = ArrayString.Replace(" ", "").Replace(",", "&").Replace(".", ",").Split('&');
            if (arrayString.Count() > 1)
            {
                foreach (var item in arrayString)
                {
                    arrayNumber.Add(Convert.ToDouble(item));
                }
            }
            else
            {
                arrayNumber.AddRange(GenerationArray(Convert.ToInt32(arrayString[0])));
            }

            sortResponce = await arrayNumber.QuickSort();
            ExTime = sortResponce.ExecutionTime;
            foreach (var item in sortResponce.Array)
            {
                responce += item + " ";
            }
        }
    }


    List<double> GenerationArray(int arrayCount)
    {
        List<double> array = new List<double>();
        if (arrayCount > 0)
        {
            Random rnd = new Random();

            for (int i = 0; i < arrayCount; i++)
            {
                double val = rnd.Next(0, 100);
                array.Add(val);
            }
        }
        return array;
    }

}

